<?php

namespace akmaljp\DriveMaru\Tests\Configurator\Helpers;

use akmaljp\DriveMaru\Tests\Test;
use akmaljp\DriveMaru\Configurator\Helpers\RegexpBuilder;

/**
* @covers akmaljp\DriveMaru\Configurator\Helpers\RegexpBuilder
*/
class RegexpBuilderTest extends Test
{
	// Start of content generated by ../../../scripts/patchRegexpBuilderTest.php
	/**
	* @testdox fromList(['foo']) returns 'foo'
	*/
	public function test_2E6B327F()
	{
		$this->fromListTestCase(0);
	}

	/**
	* @testdox fromList(['foo', 'foo']) returns 'foo'
	*/
	public function test_EFC21F10()
	{
		$this->fromListTestCase(1);
	}

	/**
	* @testdox fromList(['FOO', 'foo']) returns '(?>FOO|foo)'
	*/
	public function test_7014556B()
	{
		$this->fromListTestCase(2);
	}

	/**
	* @testdox fromList(['FOO', 'foo'], ["caseInsensitive" => true]) returns 'foo'
	*/
	public function test_D2493E8A()
	{
		$this->fromListTestCase(3);
	}

	/**
	* @testdox fromList(['a']) returns 'a'
	*/
	public function test_37E7519F()
	{
		$this->fromListTestCase(4);
	}

	/**
	* @testdox fromList(['a', 'a']) returns 'a'
	*/
	public function test_46ECDB38()
	{
		$this->fromListTestCase(5);
	}

	/**
	* @testdox fromList(['/']) returns '\\/'
	*/
	public function test_E2479414()
	{
		$this->fromListTestCase(6);
	}

	/**
	* @testdox fromList(['/'], ["delimiter" => "#"]) returns '/'
	*/
	public function test_B3EEE700()
	{
		$this->fromListTestCase(7);
	}

	/**
	* @testdox fromList(['#'], ["delimiter" => "#"]) returns '\\#'
	*/
	public function test_A1D05928()
	{
		$this->fromListTestCase(8);
	}

	/**
	* @testdox fromList(['apple', 'april']) returns 'ap(?>ple|ril)'
	*/
	public function test_8DCF0241()
	{
		$this->fromListTestCase(9);
	}

	/**
	* @testdox fromList(['bar', 'baz']) returns 'ba[rz]'
	*/
	public function test_E7FFB86F()
	{
		$this->fromListTestCase(10);
	}

	/**
	* @testdox fromList(['foo', 'fool']) returns 'fool?'
	*/
	public function test_1DFF1AB5()
	{
		$this->fromListTestCase(11);
	}

	/**
	* @testdox fromList(['ax', 'axed']) returns 'ax(?>ed)?'
	*/
	public function test_90A63EB3()
	{
		$this->fromListTestCase(12);
	}

	/**
	* @testdox fromList(['!', '#', '$', '(', ')', '*', '+', '-', '.', '/', ':', '<', '=', '>', '?', '[', '\\', ']', '^', '{', '|', '}']) returns '[!#$(-+-.\\/:<-?[-^{|}]'
	*/
	public function test_5F057A01()
	{
		$this->fromListTestCase(13);
	}

	/**
	* @testdox fromList([':)', ':(', ':]', ':[', ':|', ':/', ':\\']) returns ':[()\\/[\\\\\\]|]'
	*/
	public function test_84CEA669()
	{
		$this->fromListTestCase(14);
	}

	/**
	* @testdox fromList(['xy', '^y'], ["specialChars" => ["^" => "^"]]) returns '(?>x|^)y'
	*/
	public function test_87D67074()
	{
		$this->fromListTestCase(15);
	}

	/**
	* @testdox fromList(['xy', 'x$'], ["specialChars" => ["$" => "$"]]) returns 'x(?>y|$)'
	*/
	public function test_D9422070()
	{
		$this->fromListTestCase(16);
	}

	/**
	* @testdox fromList(['foo', 'bar']) returns '(?>bar|foo)'
	*/
	public function test_DE674C00()
	{
		$this->fromListTestCase(17);
	}

	/**
	* @testdox fromList(['*foo', '\\bar'], ["useLookahead" => true]) returns '(?=[*\\\\])(?>\\*foo|\\\\bar)'
	*/
	public function test_632A26D()
	{
		$this->fromListTestCase(18);
	}

	/**
	* @testdox fromList(['?', 'bar'], ["specialChars" => ["?" => "."], "useLookahead" => true]) returns '(?:.|bar)'
	*/
	public function test_7FFB138D()
	{
		$this->fromListTestCase(19);
	}

	/**
	* @testdox fromList(['a', 'b']) returns '[ab]'
	*/
	public function test_C90B2457()
	{
		$this->fromListTestCase(20);
	}

	/**
	* @testdox fromList(['♠', '♣', '♥', '♦']) returns '[♠♣♥♦]'
	*/
	public function test_6335367B()
	{
		$this->fromListTestCase(21);
	}

	/**
	* @testdox fromList(['♠', '♣', '♥', '♦', '.'], ["specialChars" => ["." => "."]]) returns '.'
	*/
	public function test_D9B63085()
	{
		$this->fromListTestCase(22);
	}

	/**
	* @testdox fromList(['lock', 'sock']) returns '[ls]ock'
	*/
	public function test_A3CF0B4D()
	{
		$this->fromListTestCase(23);
	}

	/**
	* @testdox fromList(['foo', 'afoo'], ["useLookahead" => true]) returns '(?=[af])a?foo'
	*/
	public function test_8613531B()
	{
		$this->fromListTestCase(24);
	}

	/**
	* @testdox fromList(['boast', 'boost']) returns 'bo[ao]st'
	*/
	public function test_4BBAD47D()
	{
		$this->fromListTestCase(25);
	}

	/**
	* @testdox fromList(['pest', 'pst']) returns 'pe?st'
	*/
	public function test_596D7420()
	{
		$this->fromListTestCase(26);
	}

	/**
	* @testdox fromList(['boast', 'boost', 'bost']) returns 'bo[ao]?st'
	*/
	public function test_E644DCEB()
	{
		$this->fromListTestCase(27);
	}

	/**
	* @testdox fromList(['boost', 'best']) returns 'b(?>e|oo)st'
	*/
	public function test_D2FB0462()
	{
		$this->fromListTestCase(28);
	}

	/**
	* @testdox fromList(['boost', 'bst']) returns 'b(?>oo)?st'
	*/
	public function test_C36BA6A5()
	{
		$this->fromListTestCase(29);
	}

	/**
	* @testdox fromList(['best', 'boost', 'bust']) returns 'b(?>[eu]|oo)st'
	*/
	public function test_29BA04C0()
	{
		$this->fromListTestCase(30);
	}

	/**
	* @testdox fromList(['boost', 'bst', 'cool']) returns '(?:b(?>oo)?st|cool)'
	*/
	public function test_4473374B()
	{
		$this->fromListTestCase(31);
	}

	/**
	* @testdox fromList(['boost', 'bst', 'cost']) returns '(?:b(?>oo)?|co)st'
	*/
	public function test_B16EB7C4()
	{
		$this->fromListTestCase(32);
	}

	/**
	* @testdox fromList(['aax', 'aay', 'aax', 'aay']) returns 'aa[xy]'
	*/
	public function test_560C8444()
	{
		$this->fromListTestCase(33);
	}

	/**
	* @testdox fromList(['aaax', 'aaay', 'baax', 'baay']) returns '[ab]aa[xy]'
	*/
	public function test_F3709BEF()
	{
		$this->fromListTestCase(34);
	}

	/**
	* @testdox fromList(['aaax', 'aaay', 'bbaax', 'bbaay']) returns '(?>a|bb)aa[xy]'
	*/
	public function test_A6EF6E21()
	{
		$this->fromListTestCase(35);
	}

	/**
	* @testdox fromList(['aaax', 'aaay', 'aax', 'aay']) returns 'aaa?[xy]'
	*/
	public function test_77F7FECB()
	{
		$this->fromListTestCase(36);
	}

	/**
	* @testdox fromList(['abx', 'aby', 'cdx', 'cdy']) returns '(?>ab|cd)[xy]'
	*/
	public function test_127E4B6E()
	{
		$this->fromListTestCase(37);
	}

	/**
	* @testdox fromList(['axx', 'ayy', 'bbxx', 'bbyy']) returns '(?>a|bb)(?>xx|yy)'
	*/
	public function test_CDAB507A()
	{
		$this->fromListTestCase(38);
	}

	/**
	* @testdox fromList(['axx', 'ayy', 'bbxx', 'bbyy', 'c']) returns '(?>c|(?>a|bb)(?>xx|yy))'
	*/
	public function test_E3951234()
	{
		$this->fromListTestCase(39);
	}

	/**
	* @testdox fromList(['axx', 'ayy', 'azz', 'bbxx', 'bbyy', 'c']) returns '(?>c|a(?>xx|yy|zz)|bb(?>xx|yy))'
	*/
	public function test_91AF5825()
	{
		$this->fromListTestCase(40);
	}

	/**
	* @testdox fromList(['ac', 'af', 'bbc', 'bbf', 'c']) returns '(?>c|a[cf]|bb[cf])'
	*/
	public function test_5E3E54F3()
	{
		$this->fromListTestCase(41);
	}

	/**
	* @testdox fromList(['^example.org$', '.example.org$', '^localhost$', '.localhost$'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns '(?>\\.|^)(?>example\\.org|localhost)$'
	*/
	public function test_553F87F8()
	{
		$this->fromListTestCase(42);
	}

	/**
	* @testdox fromList(['xixix', 'xoxox']) returns 'x(?>ixi|oxo)x'
	*/
	public function test_3B388A82()
	{
		$this->fromListTestCase(43);
	}

	/**
	* @testdox fromList(['xixix', 'xixox', 'xoxox', 'xoxix']) returns 'x[io]x[io]x'
	*/
	public function test_C7D616C2()
	{
		$this->fromListTestCase(44);
	}

	/**
	* @testdox fromList(['afoo', 'abar', 'bbfoo', 'bbbar', 'a', 'bb']) returns '(?>a|bb)(?>bar|foo)?'
	*/
	public function test_C9877394()
	{
		$this->fromListTestCase(45);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bx', 'by']) returns '[ab][xy]'
	*/
	public function test_4619FD0F()
	{
		$this->fromListTestCase(46);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bx', 'by', 'c']) returns '(?>c|[ab][xy])'
	*/
	public function test_BCD28919()
	{
		$this->fromListTestCase(47);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bx', 'by', 'x', 'y']) returns '[ab]?[xy]'
	*/
	public function test_660FC1A9()
	{
		$this->fromListTestCase(48);
	}

	/**
	* @testdox fromList(['03', '04', '13', '14', '3', '4']) returns '[01]?[34]'
	*/
	public function test_B3EB536()
	{
		$this->fromListTestCase(49);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bbx', 'bby', 'c']) returns '(?>c|a[xy]|bb[xy])'
	*/
	public function test_1A58B8A1()
	{
		$this->fromListTestCase(50);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bx', 'by', 'c', 'ddx', 'ddy']) returns '(?>c|dd[xy]|[ab][xy])'
	*/
	public function test_28AB5133()
	{
		$this->fromListTestCase(51);
	}

	/**
	* @testdox fromList(['']) returns ''
	*/
	public function test_5CBF14D3()
	{
		$this->fromListTestCase(52);
	}

	/**
	* @testdox fromList(['', '']) returns ''
	*/
	public function test_418D8F44()
	{
		$this->fromListTestCase(53);
	}

	/**
	* @testdox fromList([]) returns ''
	*/
	public function test_1E8614E3()
	{
		$this->fromListTestCase(54);
	}

	/**
	* @testdox fromList(['ad', 'bd'], ["specialChars" => ["d" => "\\d"]]) returns '[ab]\\d'
	*/
	public function test_5B18C2D1()
	{
		$this->fromListTestCase(55);
	}

	/**
	* @testdox fromList(['a', 'ax', 'ad', 'd', 'dx', 'dd'], ["specialChars" => ["d" => "\\d"]]) returns '[\\da][\\dx]?'
	*/
	public function test_4032006C()
	{
		$this->fromListTestCase(56);
	}

	/**
	* @testdox fromList(['foo', 'bar', 'y', 'z']) returns '(?>[yz]|bar|foo)'
	*/
	public function test_A28B3A84()
	{
		$this->fromListTestCase(57);
	}

	/**
	* @testdox fromList(['foo', 'bar', 'baz', 'y', 'z']) returns '(?>[yz]|ba[rz]|foo)'
	*/
	public function test_2F461F5()
	{
		$this->fromListTestCase(58);
	}

	/**
	* @testdox fromList(['a', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:a(?>a(?>cc|dd))?|bb(?>cc|dd))'
	*/
	public function test_7C3B11DD()
	{
		$this->fromListTestCase(59);
	}

	/**
	* @testdox fromList(['aa', 'bb', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?>aa|bb)(?>cc|dd)?'
	*/
	public function test_3F4CA3E0()
	{
		$this->fromListTestCase(60);
	}

	/**
	* @testdox fromList(['aa', 'bb', 'aaccxx', 'aaddxx', 'bbccxx', 'bbddxx', 'aaccyy', 'aaddyy', 'bbccyy', 'bbddyy']) returns '(?>aa|bb)(?>(?>cc|dd)(?>xx|yy))?'
	*/
	public function test_9D02B595()
	{
		$this->fromListTestCase(61);
	}

	/**
	* @testdox fromList(['^foo$', '^foo'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns '^foo'
	*/
	public function test_CDAEB9BF()
	{
		$this->fromListTestCase(62);
	}

	/**
	* @testdox fromList(['^foo$', 'foo$'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns 'foo$'
	*/
	public function test_58B353C0()
	{
		$this->fromListTestCase(63);
	}

	/**
	* @testdox fromList(['bfoo', 'bfoob'], ["specialChars" => ["b" => "\\b"]]) returns '\\bfoo'
	*/
	public function test_6985D5F9()
	{
		$this->fromListTestCase(64);
	}

	/**
	* @testdox fromList(['apple', 'apple*'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
	*/
	public function test_C73BB118()
	{
		$this->fromListTestCase(65);
	}

	/**
	* @testdox fromList(['apple*', 'applepie'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
	*/
	public function test_BC8587F9()
	{
		$this->fromListTestCase(66);
	}

	/**
	* @testdox fromList(['apple*', 'applepie'], ["specialChars" => ["*" => ".+?"]]) returns 'apple.+?'
	*/
	public function test_C445AC48()
	{
		$this->fromListTestCase(67);
	}

	/**
	* @testdox fromList(['apple*', 'apple'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
	*/
	public function test_3CD709C9()
	{
		$this->fromListTestCase(68);
	}

	/**
	* @testdox fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".*?", "+" => ".*"]]) returns 'apple.*'
	*/
	public function test_E13691C4()
	{
		$this->fromListTestCase(69);
	}

	/**
	* @testdox fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".+?", "+" => ".+"]]) returns 'apple.+'
	*/
	public function test_C1CD7108()
	{
		$this->fromListTestCase(70);
	}

	/**
	* @testdox fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".*", "+" => ".+"]]) returns 'apple.*'
	*/
	public function test_9C89464A()
	{
		$this->fromListTestCase(71);
	}

	/**
	* @testdox fromList(['applepie', 'lemonpie', 'pie', '*pie'], ["specialChars" => ["*" => ".*"]]) returns '.*pie'
	*/
	public function test_C7A9B0A5()
	{
		$this->fromListTestCase(72);
	}

	/**
	* @testdox fromList(['*pie*', 'lemonpie'], ["specialChars" => ["*" => ".*"]]) returns '.*pie.*'
	*/
	public function test_C54CFAF6()
	{
		$this->fromListTestCase(73);
	}

	/**
	* @testdox fromList(['*pie*', 'lemonpie', 'banana'], ["specialChars" => ["*" => ".*"]]) returns '(?:.*pie.*|banana)'
	*/
	public function test_34EFDA6F()
	{
		$this->fromListTestCase(74);
	}

	/**
	* @testdox fromList(['^foo$', '^foo+'], ["specialChars" => ["^" => "^", "$" => "$", "+" => ".+"]]) returns '^foo(?:$|.+)'
	*/
	public function test_F3C52183()
	{
		$this->fromListTestCase(75);
	}

	/**
	* @testdox fromList(['^foo$', '^foo*'], ["specialChars" => ["^" => "^", "$" => "$", "*" => ".*"]]) returns '^foo.*'
	*/
	public function test_57BBBDB4()
	{
		$this->fromListTestCase(76);
	}

	/**
	* @testdox fromList(['food', 'foo+'], ["specialChars" => ["d" => "\\d", "+" => ".+"]]) returns 'foo.+'
	*/
	public function test_3C407EB8()
	{
		$this->fromListTestCase(77);
	}

	/**
	* @testdox fromList(['foo*', 'foo+'], ["specialChars" => ["*" => "\\w*", "+" => ".+"]]) returns 'foo(?:\\w*|.+)'
	*/
	public function test_7A1B32CC()
	{
		$this->fromListTestCase(78);
	}

	/**
	* @testdox fromList(['foo?', 'foo+'], ["specialChars" => ["?" => "\\w?", "+" => ".+"]]) returns 'foo(?:.+|\\w?)'
	*/
	public function test_44A90030()
	{
		$this->fromListTestCase(79);
	}

	/**
	* @testdox fromList(['fooB', 'foo+'], ["specialChars" => ["B" => "\\B", "+" => ".+"]]) returns 'foo(?:.+|\\B)'
	*/
	public function test_16E28B20()
	{
		$this->fromListTestCase(80);
	}

	/**
	* @testdox fromList(['fooA', 'fooB', 'foo+'], ["specialChars" => ["A" => "\\A", "B" => "\\B", "+" => ".+"]]) returns 'foo(?:.+|\\A|\\B)'
	*/
	public function test_DF7E2648()
	{
		$this->fromListTestCase(81);
	}

	/**
	* @testdox fromList(['+foo+', 'fooB'], ["specialChars" => ["B" => "\\B", "+" => ".+"]]) returns '(?:.+foo.+|foo\\B)'
	*/
	public function test_94F12345()
	{
		$this->fromListTestCase(82);
	}

	/**
	* @testdox fromList(['+foo+', 'foo', 'bar'], ["specialChars" => ["+" => ".+"]]) returns '(?:.+foo.+|bar|foo)'
	*/
	public function test_C55ADFEF()
	{
		$this->fromListTestCase(83);
	}

	/**
	* @testdox fromList(['+foo+', '+foo', 'bar'], ["specialChars" => ["+" => ".+"]]) returns '(?:.+foo.*|bar)'
	*/
	public function test_69C9F3E0()
	{
		$this->fromListTestCase(84);
	}

	/**
	* @testdox fromList(['+foo+', '+foo'], ["specialChars" => ["+" => ".+"]]) returns '.+foo.*'
	*/
	public function test_6AA5ABFC()
	{
		$this->fromListTestCase(85);
	}

	/**
	* @testdox fromList(['++', 'a'], ["specialChars" => ["+" => ".+"]]) returns '(?:a|.+.+)'
	*/
	public function test_51B52D9E()
	{
		$this->fromListTestCase(86);
	}

	/**
	* @testdox fromList(['a', '.'], ["specialChars" => ["." => "."]]) returns '.'
	*/
	public function test_C29CED5()
	{
		$this->fromListTestCase(87);
	}

	/**
	* @testdox fromList(['hip', 'hop', 'h.p'], ["specialChars" => ["." => "."]]) returns 'h.p'
	*/
	public function test_6AB3A485()
	{
		$this->fromListTestCase(88);
	}

	/**
	* @testdox fromList(['hi', 'hop', 'h.p'], ["specialChars" => ["." => "."]]) returns 'h(?:i|.p)'
	*/
	public function test_8FC43CB0()
	{
		$this->fromListTestCase(89);
	}

	/**
	* @testdox fromList(['h', 'h.'], ["specialChars" => ["." => "."]]) returns 'h.?'
	*/
	public function test_9BA9174B()
	{
		$this->fromListTestCase(90);
	}

	/**
	* @testdox fromList(['h.', 'hd'], ["specialChars" => ["." => ".", "d" => "\\d\\d"]]) returns 'h(?:.|\\d\\d)'
	*/
	public function test_A1628B44()
	{
		$this->fromListTestCase(91);
	}

	/**
	* @testdox fromList(['hXXXXXXXXXXX', 'h\\^$.[]()+*?', 'hotel'], ["specialChars" => ["X" => "."]]) returns 'h(?:...........|otel)'
	*/
	public function test_71D6E963()
	{
		$this->fromListTestCase(92);
	}

	/**
	* @testdox fromList(['zdDhHsSvVwW', 'z..........', 'zebra'], ["specialChars" => ["d" => "\\d", "D" => "D", "h" => "\\h", "H" => "\\H", "s" => "\\s", "S" => "S", "v" => "\\v", "V" => "\\V", "w" => "\\w", "W" => "W", "." => "."]]) returns 'z(?:..........|ebra)'
	*/
	public function test_4C2C4778()
	{
		$this->fromListTestCase(93);
	}

	/**
	* @testdox fromList(['m.', 'mb'], ["specialChars" => ["." => ".", "b" => "\\b"]]) returns 'm(?:.|\\b)'
	*/
	public function test_B05A865()
	{
		$this->fromListTestCase(94);
	}

	/**
	* @testdox fromList(['m.', 'mB'], ["specialChars" => ["." => ".", "B" => "\\B"]]) returns 'm(?:.|\\B)'
	*/
	public function test_823A9663()
	{
		$this->fromListTestCase(95);
	}

	/**
	* @testdox fromList(['m.', 'mA'], ["specialChars" => ["." => ".", "A" => "\\A"]]) returns 'm(?:.|\\A)'
	*/
	public function test_E58BCD87()
	{
		$this->fromListTestCase(96);
	}

	/**
	* @testdox fromList(['m.', 'mZ'], ["specialChars" => ["." => ".", "Z" => "\\Z"]]) returns 'm(?:.|\\Z)'
	*/
	public function test_95245C1()
	{
		$this->fromListTestCase(97);
	}

	/**
	* @testdox fromList(['m.', 'mz'], ["specialChars" => ["." => ".", "z" => "\\z"]]) returns 'm(?:.|\\z)'
	*/
	public function test_806D7BC7()
	{
		$this->fromListTestCase(98);
	}

	/**
	* @testdox fromList(['m.', 'mG'], ["specialChars" => ["." => ".", "G" => "\\G"]]) returns 'm(?:.|\\G)'
	*/
	public function test_2AE97A4F()
	{
		$this->fromListTestCase(99);
	}

	/**
	* @testdox fromList(['m.', 'mQ'], ["specialChars" => ["." => ".", "Q" => "\\Q"]]) returns 'm(?:.|\\Q)'
	*/
	public function test_A1145284()
	{
		$this->fromListTestCase(100);
	}

	/**
	* @testdox fromList(['m.', 'mE'], ["specialChars" => ["." => ".", "E" => "\\E"]]) returns 'm(?:.|\\E)'
	*/
	public function test_6FC8E8F7()
	{
		$this->fromListTestCase(101);
	}

	/**
	* @testdox fromList(['m.', 'mK'], ["specialChars" => ["." => ".", "K" => "\\K"]]) returns 'm(?:.|\\K)'
	*/
	public function test_6F5D139E()
	{
		$this->fromListTestCase(102);
	}

	/**
	* @testdox fromList(['h$', 'h.'], ["specialChars" => ["." => ".", "$" => "$"]]) returns 'h(?:$|.)'
	*/
	public function test_34005F32()
	{
		$this->fromListTestCase(103);
	}

	/**
	* @testdox fromList(['h?', 'ha'], ["specialChars" => ["?" => ".?"]]) returns 'h.?'
	*/
	public function test_8DB4D1E0()
	{
		$this->fromListTestCase(104);
	}

	/**
	* @testdox fromList(['a', 'a?', 'bb'], ["specialChars" => ["?" => ".?"]]) returns '(?:a|a.|bb)'
	*/
	public function test_28CA4237()
	{
		$this->fromListTestCase(105);
	}

	/**
	* @testdox fromList(['h.', 'hi', 'hit'], ["specialChars" => ["." => ".?"]]) returns 'h(?:.|it)?'
	*/
	public function test_2ABBC9E3()
	{
		$this->fromListTestCase(106);
	}

	/**
	* @testdox fromList(['a.c.e', 'a.ce', 'ac.e', 'ace', 'acde', 'abce', 'abcde'], ["specialChars" => ["." => ".?"]]) returns 'a.?c.?e'
	*/
	public function test_8E336686()
	{
		$this->fromListTestCase(107);
	}

	/**
	* @testdox fromList(['h????', 'hello', 'heart'], ["specialChars" => ["?" => ".?"]]) returns 'h.?.?.?.?'
	*/
	public function test_8E765F3B()
	{
		$this->fromListTestCase(108);
	}

	/**
	* @testdox fromList(['x', 'xx', 'xxx']) returns 'xx?x?'
	*/
	public function test_A55EF35C()
	{
		$this->fromListTestCase(109);
	}

	/**
	* @testdox fromList(['d', 'dd', 'ddd'], ["specialChars" => ["d" => "\\d"]]) returns '\\d\\d?\\d?'
	*/
	public function test_69AB5342()
	{
		$this->fromListTestCase(110);
	}

	/**
	* @testdox fromList(['*x', 'x'], ["specialChars" => ["*" => "[^z]+"]]) returns '[^z]*?x'
	*/
	public function test_1EC33400()
	{
		$this->fromListTestCase(111);
	}

	/**
	* @testdox fromList(['*x', 'x'], ["specialChars" => ["*" => "[^z]?"]]) returns '[^z]?x'
	*/
	public function test_BD9D0B76()
	{
		$this->fromListTestCase(112);
	}

	/**
	* @testdox fromList(['*x', 'x'], ["specialChars" => ["*" => "[^z]"]]) returns '[^z]?x'
	*/
	public function test_7540EC90()
	{
		$this->fromListTestCase(113);
	}

	/**
	* @testdox fromList(['x.x', 'xbbx'], ["specialChars" => ["." => "."]]) returns 'x(?:.|bb)x'
	*/
	public function test_6367620F()
	{
		$this->fromListTestCase(114);
	}

	/**
	* @testdox fromList(['x?x', 'xbbx'], ["specialChars" => ["?" => "\\w"]]) returns 'x(?:\\w|bb)x'
	*/
	public function test_22FFCA38()
	{
		$this->fromListTestCase(115);
	}

	/**
	* @testdox fromList(['x*x', 'xb-bx'], ["specialChars" => ["*" => "\\w*"]]) returns 'x(?:\\w*|b-b)x'
	*/
	public function test_3F5FDC6()
	{
		$this->fromListTestCase(116);
	}

	/**
	* @testdox fromList(['x*x', 'xb-bx'], ["specialChars" => ["*" => "\\w+"]]) returns 'x(?:\\w+|b-b)x'
	*/
	public function test_C417EE8E()
	{
		$this->fromListTestCase(117);
	}

	/**
	* @testdox fromList([':X', ':D', ':P', ':P']) returns ':[DPX]'
	*/
	public function test_8FED9D1C()
	{
		$this->fromListTestCase(118);
	}

	/**
	* @testdox fromList([':X', ':D', ':P', ':p'], ["caseInsensitive" => true]) returns ':[dpx]'
	*/
	public function test_84BE9ED2()
	{
		$this->fromListTestCase(119);
	}

	/**
	* @testdox fromList(['¼', '½']) returns '[¼½]'
	*/
	public function test_DF7DFA2E()
	{
		$this->fromListTestCase(120);
	}

	/**
	* @testdox fromList(['¼', '½'], ["unicode" => true]) returns '[¼½]'
	*/
	public function test_71FDD57B()
	{
		$this->fromListTestCase(121);
	}

	/**
	* @testdox fromList(['¼', '½'], ["unicode" => false]) returns "\xC2[\xBC\xBD]"
	*/
	public function test_D4EF85F4()
	{
		$this->fromListTestCase(122);
	}
	// End of content generated by ../../../scripts/patchRegexpBuilderTest.php

	protected function fromListTestCase($k)
	{
		$data = $this->getWordsLists();

		$expected = $data[$k][0];
		$words    = $data[$k][1];
		$options  = (isset($data[$k][2])) ? $data[$k][2] : [];

		$this->assertSame($expected, RegexpBuilder::fromList($words, $options));
	}

	/**
	* @expectedException RuntimeException
	* @expectedExceptionMessage Invalid UTF-8 string
	* @testdox fromList() throws a RuntimeException if any word is not legal UTF-8
	*/
	public function testUTF8Exception()
	{
		RegexpBuilder::fromList(["\xff\xff"]);
	}

	public function getWordsLists()
	{
		return [
			[
				'foo',
				['foo']
			],
			[
				'foo',
				['foo', 'foo']
			],
			[
				'(?>FOO|foo)',
				['FOO', 'foo']
			],
			[
				'foo',
				['FOO', 'foo'],
				['caseInsensitive' => true]
			],
			[
				'a',
				['a']
			],
			[
				'a',
				['a', 'a']
			],
			[
				'\\/',
				['/'],
			],
			[
				'/',
				['/'],
				['delimiter' => '#']
			],
			[
				'\\#',
				['#'],
				['delimiter' => '#']
			],
			[
				'ap(?>ple|ril)',
				['apple', 'april']
			],
			[
				'ba[rz]',
				['bar', 'baz']
			],
			[
				'fool?',
				['foo', 'fool']
			],
			[
				'ax(?>ed)?',
				['ax', 'axed']
			],
			[
				'[!#$(-+-.\\/:<-?[-^{|}]',
				str_split('!#$()*+-./:<=>?[\\]^{|}', 1)
			],
			[
				':[()\\/[\\\\\\]|]',
				[':)', ':(', ':]', ':[', ':|', ':/', ':\\']
			],
			[
				'(?>x|^)y',
				['xy', '^y'],
				['specialChars' => ['^' => '^']]
			],
			[
				'x(?>y|$)',
				['xy', 'x$'],
				['specialChars' => ['$' => '$']]
			],
			[
				'(?>bar|foo)',
				['foo', 'bar']
			],
			[
				'(?=[*\\\\])(?>\\*foo|\\\\bar)',
				['*foo', '\\bar'],
				['useLookahead' => true]
			],
			[
				'(?:.|bar)',
				// Here, we build a regexp that matches one single character or the word "bar"
				// The joker ? is replaced by the special character .
				['?', 'bar'],
				['specialChars' => ['?' => '.'], 'useLookahead' => true]
			],
			[
				'[ab]',
				['a', 'b']
			],
			[
				'[♠♣♥♦]',
				['♠', '♣', '♥', '♦']
			],
			[
				'.',
				['♠', '♣', '♥', '♦', '.'],
				['specialChars' => ['.' => '.']]
			],
			[
				'[ls]ock',
				['lock', 'sock']
			],
			[
				'(?=[af])a?foo',
				['foo', 'afoo'],
				['useLookahead' => true]
			],
			[
				'bo[ao]st',
				['boast', 'boost']
			],
			[
				'pe?st',
				['pest', 'pst']
			],
			[
				'bo[ao]?st',
				['boast', 'boost', 'bost']
			],
			[
				'b(?>e|oo)st',
				['boost', 'best']
			],
			[
				'b(?>oo)?st',
				['boost', 'bst']
			],
			[
				'b(?>[eu]|oo)st',
				['best', 'boost', 'bust']
			],
			[
				'(?:b(?>oo)?st|cool)',
				['boost', 'bst', 'cool']
			],
			[
				'(?:b(?>oo)?|co)st',
				['boost', 'bst', 'cost']
			],
			[
				'aa[xy]',
				['aax', 'aay', 'aax', 'aay']
			],
			[
				'[ab]aa[xy]',
				['aaax', 'aaay', 'baax', 'baay']
			],
			[
				'(?>a|bb)aa[xy]',
				['aaax', 'aaay', 'bbaax', 'bbaay']
			],
			[
				'aaa?[xy]',
				['aaax', 'aaay', 'aax', 'aay']
			],
			[
				'(?>ab|cd)[xy]',
				['abx', 'aby', 'cdx', 'cdy']
			],
			[
				'(?>a|bb)(?>xx|yy)',
				['axx', 'ayy', 'bbxx', 'bbyy']
			],
			[
				'(?>c|(?>a|bb)(?>xx|yy))',
				['axx', 'ayy', 'bbxx', 'bbyy', 'c']
			],
			[
				// Ensure it doesn't become (?:c|(?:a|bb)(?:xx|yy)|azz) even though it would be
				// shorter, because having fewer alternations at the top level is more important
				'(?>c|a(?>xx|yy|zz)|bb(?>xx|yy))',
				['axx', 'ayy', 'azz', 'bbxx', 'bbyy', 'c']
			],
			[
				// We don't merge "ac", "af", "bbc" and "bbf" tails because the result
				// (?:c|(?:a|bb)[cf]) is neither more performant nor shorter
				'(?>c|a[cf]|bb[cf])',
				['ac', 'af', 'bbc', 'bbf', 'c']
			],
			[
				// Typical regexp used in UrlConfig for matching hostnames and subdomains
				'(?>\\.|^)(?>example\\.org|localhost)$',
				['^example.org$', '.example.org$', '^localhost$', '.localhost$'],
				['specialChars' => ['^' => '^', '$' => '$']]
			],
			[
				'x(?>ixi|oxo)x',
				['xixix', 'xoxox']
			],
			[
				'x[io]x[io]x',
				['xixix', 'xixox', 'xoxox', 'xoxix']
			],
			[
				'(?>a|bb)(?>bar|foo)?',
				['afoo', 'abar', 'bbfoo', 'bbbar', 'a', 'bb']
			],
			[
				'[ab][xy]',
				['ax', 'ay', 'bx', 'by']
			],
			[
				'(?>c|[ab][xy])',
				['ax', 'ay', 'bx', 'by', 'c']
			],
			[
				'[ab]?[xy]',
				['ax', 'ay', 'bx', 'by', 'x', 'y']
			],
			[
				'[01]?[34]',
				['03', '04', '13', '14', '3', '4']
			],
			// Ensure that merging tails does not create subpatterns
			[
				'(?>c|a[xy]|bb[xy])',
				['ax', 'ay', 'bbx', 'bby', 'c']
			],
			[
				'(?>c|dd[xy]|[ab][xy])',
				['ax', 'ay', 'bx', 'by', 'c', 'ddx', 'ddy']
			],
			// Those three only exist to make sure nothing bad happens (e.g. no infinite loop)
			[
				'',
				['']
			],
			[
				'',
				['', '']
			],
			[
				'',
				[]
			],
			[
				'[ab]\\d',
				['ad', 'bd'],
				['specialChars' => ['d' => '\\d']]
			],
			[
				'[\\da][\\dx]?',
				['a', 'ax', 'ad', 'd', 'dx', 'dd'],
				['specialChars' => ['d' => '\\d']]
			],
			// Ensure that character classes made from single characters appear first in alternation
			[
				'(?>[yz]|bar|foo)',
				['foo', 'bar', 'y', 'z']
			],
			[
				'(?>[yz]|ba[rz]|foo)',
				['foo', 'bar', 'baz', 'y', 'z']
			],
			[
				'(?:a(?>a(?>cc|dd))?|bb(?>cc|dd))',
				['a', 'aacc', 'aadd', 'bbcc', 'bbdd']
			],
			[
				'(?>aa|bb)(?>cc|dd)?',
				['aa', 'bb', 'aacc', 'aadd', 'bbcc', 'bbdd']
			],
			[
				'(?>aa|bb)(?>(?>cc|dd)(?>xx|yy))?',
				[
					'aa', 'bb',
					'aaccxx', 'aaddxx', 'bbccxx', 'bbddxx',
					'aaccyy', 'aaddyy', 'bbccyy', 'bbddyy'
				]
			],
			[
				'^foo',
				['^foo$', '^foo'],
				['specialChars' => ['^' => '^', '$' => '$']]
			],
			[
				'foo$',
				['^foo$', 'foo$'],
				['specialChars' => ['^' => '^', '$' => '$']]
			],
			[
				'\\bfoo',
				['bfoo', 'bfoob'],
				['specialChars' => ['b' => '\\b']]
			],
			[
				'apple.*?',
				['apple', 'apple*'],
				['specialChars' => ['*' => '.*?']]
			],
			[
				'apple.*?',
				['apple*', 'applepie'],
				['specialChars' => ['*' => '.*?']]
			],
			[
				'apple.+?',
				['apple*', 'applepie'],
				['specialChars' => ['*' => '.+?']]
			],
			[
				'apple.*?',
				['apple*', 'apple'],
				['specialChars' => ['*' => '.*?']]
			],
			[
				'apple.*',
				['apple*', 'apple+'],
				['specialChars' => ['*' => '.*?', '+' => '.*']]
			],
			[
				'apple.+',
				['apple*', 'apple+'],
				['specialChars' => ['*' => '.+?', '+' => '.+']]
			],
			[
				'apple.*',
				['apple*', 'apple+'],
				['specialChars' => ['*' => '.*', '+' => '.+']]
			],
			[
				'.*pie',
				['applepie', 'lemonpie', 'pie', '*pie'],
				['specialChars' => ['*' => '.*']]
			],
			[
				'.*pie.*',
				['*pie*', 'lemonpie'],
				['specialChars' => ['*' => '.*']]
			],
			[
				'(?:.*pie.*|banana)',
				['*pie*', 'lemonpie', 'banana'],
				['specialChars' => ['*' => '.*']]
			],
			[
				'^foo(?:$|.+)',
				['^foo$', '^foo+'],
				['specialChars' => ['^' => '^', '$' => '$', '+' => '.+']]
			],
			[
				'^foo.*',
				['^foo$', '^foo*'],
				['specialChars' => ['^' => '^', '$' => '$', '*' => '.*']]
			],
			[
				'foo.+',
				['food', 'foo+'],
				['specialChars' => ['d' => '\\d', '+' => '.+']]
			],
			[
				'foo(?:\\w*|.+)',
				['foo*', 'foo+'],
				['specialChars' => ['*' => '\\w*', '+' => '.+']]
			],
			[
				'foo(?:.+|\\w?)',
				['foo?', 'foo+'],
				['specialChars' => ['?' => '\\w?', '+' => '.+']]
			],
			[
				'foo(?:.+|\\B)',
				['fooB', 'foo+'],
				['specialChars' => ['B' => '\\B', '+' => '.+']]
			],
			[
				'foo(?:.+|\\A|\\B)',
				['fooA', 'fooB', 'foo+'],
				['specialChars' => ['A' => '\\A', 'B' => '\\B', '+' => '.+']]
			],
			[
				'(?:.+foo.+|foo\\B)',
				['+foo+', 'fooB'],
				['specialChars' => ['B' => '\\B', '+' => '.+']]
			],
			[
				'(?:.+foo.+|bar|foo)',
				['+foo+', 'foo', 'bar'],
				['specialChars' => ['+' => '.+']]
			],
			[
				'(?:.+foo.*|bar)',
				['+foo+', '+foo', 'bar'],
				['specialChars' => ['+' => '.+']]
			],
			[
				'.+foo.*',
				['+foo+', '+foo'],
				['specialChars' => ['+' => '.+']]
			],
			[
				'(?:a|.+.+)',
				['++', 'a'],
				['specialChars' => ['+' => '.+']]
			],
			[
				'.',
				['a', '.'],
				['specialChars' => ['.' => '.']]
			],
			[
				'h.p',
				['hip', 'hop', 'h.p'],
				['specialChars' => ['.' => '.']]
			],
			[
				'h(?:i|.p)',
				['hi', 'hop', 'h.p'],
				['specialChars' => ['.' => '.']]
			],
			[
				'h.?',
				['h', 'h.'],
				['specialChars' => ['.' => '.']]
			],
			[
				'h(?:.|\\d\\d)',
				['h.', 'hd'],
				['specialChars' => ['.' => '.', 'd' => '\\d\\d']]
			],
			[
				'h(?:...........|otel)',
				['hXXXXXXXXXXX', 'h\\^$.[]()+*?', 'hotel'],
				['specialChars' => ['X' => '.']]
			],
			/**
			* @link http://docs.php.net/manual/en/regexp.reference.escape.php
			*/
			[
				'z(?:..........|ebra)',
				['zdDhHsSvVwW', 'z..........', 'zebra'],
				['specialChars' => [
					'd' => '\\d', 'D' => 'D', 'h' => '\\h', 'H' => '\\H',
					's' => '\\s', 'S' => 'S', 'v' => '\\v', 'V' => '\\V',
					'w' => '\\w', 'W' => 'W', '.' => '.'
				]]
			],
			[
				'm(?:.|\\b)',
				['m.', 'mb'],
				['specialChars' => ['.' => '.', 'b' => '\\b']]
			],
			[
				'm(?:.|\\B)',
				['m.', 'mB'],
				['specialChars' => ['.' => '.', 'B' => '\\B']]
			],
			[
				'm(?:.|\\A)',
				['m.', 'mA'],
				['specialChars' => ['.' => '.', 'A' => '\\A']]
			],
			[
				'm(?:.|\\Z)',
				['m.', 'mZ'],
				['specialChars' => ['.' => '.', 'Z' => '\\Z']]
			],
			[
				'm(?:.|\\z)',
				['m.', 'mz'],
				['specialChars' => ['.' => '.', 'z' => '\\z']]
			],
			[
				'm(?:.|\\G)',
				['m.', 'mG'],
				['specialChars' => ['.' => '.', 'G' => '\\G']]
			],
			[
				'm(?:.|\\Q)',
				['m.', 'mQ'],
				['specialChars' => ['.' => '.', 'Q' => '\\Q']]
			],
			[
				'm(?:.|\\E)',
				['m.', 'mE'],
				['specialChars' => ['.' => '.', 'E' => '\\E']]
			],
			[
				'm(?:.|\\K)',
				['m.', 'mK'],
				['specialChars' => ['.' => '.', 'K' => '\\K']]
			],
			[
				'h(?:$|.)',
				['h$', 'h.'],
				['specialChars' => ['.' => '.', '$' => '$']]
			],
			[
				'h.?',
				['h?', 'ha'],
				['specialChars' => ['?' => '.?']]
			],
			[
				'(?:a|a.|bb)',
				['a', 'a?', 'bb'],
				['specialChars' => ['?' => '.?']]
			],
			[
				'h(?:.|it)?',
				['h.', 'hi', 'hit'],
				['specialChars' => ['.' => '.?']]
			],
			[
				'a.?c.?e',
				['a.c.e', 'a.ce', 'ac.e', 'ace', 'acde', 'abce', 'abcde'],
				['specialChars' => ['.' => '.?']]
			],
			[
				'h.?.?.?.?',
				['h????', 'hello', 'heart'],
				['specialChars' => ['?' => '.?']]
			],
			[
				'xx?x?',
				['x', 'xx', 'xxx']
			],
			[
				'\\d\\d?\\d?',
				['d', 'dd', 'ddd'],
				['specialChars' => ['d' => '\\d']]
			],
			[
				'[^z]*?x',
				['*x', 'x'],
				['specialChars' => ['*' => '[^z]+']]
			],
			[
				'[^z]?x',
				['*x', 'x'],
				['specialChars' => ['*' => '[^z]?']]
			],
			[
				'[^z]?x',
				['*x', 'x'],
				['specialChars' => ['*' => '[^z]']]
			],
			// Atomic grouping tests
			[
				'x(?:.|bb)x',
				['x.x', 'xbbx'],
				['specialChars' => ['.' => '.']]
			],
			[
				'x(?:\\w|bb)x',
				['x?x', 'xbbx'],
				['specialChars' => ['?' => '\\w']]
			],
			[
				'x(?:\\w*|b-b)x',
				['x*x', 'xb-bx'],
				['specialChars' => ['*' => '\\w*']]
			],
			[
				'x(?:\\w+|b-b)x',
				['x*x', 'xb-bx'],
				['specialChars' => ['*' => '\\w+']]
			],
			[
				':[DPX]',
				[':X', ':D', ':P', ':P']
			],
			[
				':[dpx]',
				[':X', ':D', ':P', ':p'],
				['caseInsensitive' => true]
			],
			[
				'[¼½]',
				['¼', '½'],
			],
			[
				'[¼½]',
				['¼', '½'],
				['unicode' => true]
			],
			[
				"\xC2[\xBC\xBD]",
				['¼', '½'],
				['unicode' => false]
			],
		];
	}
}